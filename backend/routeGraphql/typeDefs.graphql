
type User {
    name: String!
    # type: userType # user dao
    email: String!
    emailVerified: Boolean # email dao
    songs: [Song] # store Song ID or not is a question
    stared: [Song]
    following: [User]
    # setting: UserSetting
}

enum userType {
    FREE
    PRO
}

type Song {
    author: String!
    name: String! 
    notes2D: String!
    # speed: Float
    # starNum: Float
    # isPersonal: Boolean
}

# input SongInput {
#   author: String!
#   name: String!
#   notes2D: String!
# }

type Query {
    user(name: String!): User!
}

# http://graphql.org/graphql-js/mutations-and-input-types/
type Mutation {
    putSong(author: String!, name: String!, notes2D: String!): String
    deleteSong(author: String!, name: String!): String
}

# we need to tell the server which types represent the root query
# and root mutation types. We call them RootQuery and RootMutation by convention.
schema {
  query: Query
  mutation: Mutation
}